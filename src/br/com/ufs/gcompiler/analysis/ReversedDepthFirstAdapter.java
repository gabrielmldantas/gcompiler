/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.gcompiler.analysis;

import java.util.*;
import br.com.ufs.gcompiler.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getDeclList() != null)
        {
            node.getDeclList().apply(this);
        }
        outAProgram(node);
    }

    public void inADeclList(ADeclList node)
    {
        defaultIn(node);
    }

    public void outADeclList(ADeclList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclList(ADeclList node)
    {
        inADeclList(node);
        {
            List<PDecl> copy = new ArrayList<PDecl>(node.getDecl());
            Collections.reverse(copy);
            for(PDecl e : copy)
            {
                e.apply(this);
            }
        }
        outADeclList(node);
    }

    public void inAVarDeclDecl(AVarDeclDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDeclDecl(AVarDeclDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclDecl(AVarDeclDecl node)
    {
        inAVarDeclDecl(node);
        if(node.getVarDecl() != null)
        {
            node.getVarDecl().apply(this);
        }
        outAVarDeclDecl(node);
    }

    public void inAFuncDeclDecl(AFuncDeclDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclDecl(AFuncDeclDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclDecl(AFuncDeclDecl node)
    {
        inAFuncDeclDecl(node);
        if(node.getFuncDecl() != null)
        {
            node.getFuncDecl().apply(this);
        }
        outAFuncDeclDecl(node);
    }

    public void inASimpleVarDecl(ASimpleVarDecl node)
    {
        defaultIn(node);
    }

    public void outASimpleVarDecl(ASimpleVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleVarDecl(ASimpleVarDecl node)
    {
        inASimpleVarDecl(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeSpec() != null)
        {
            node.getTypeSpec().apply(this);
        }
        outASimpleVarDecl(node);
    }

    public void inAArrayVarDecl(AArrayVarDecl node)
    {
        defaultIn(node);
    }

    public void outAArrayVarDecl(AArrayVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayVarDecl(AArrayVarDecl node)
    {
        inAArrayVarDecl(node);
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeSpec() != null)
        {
            node.getTypeSpec().apply(this);
        }
        outAArrayVarDecl(node);
    }

    public void inAFuncDecl(AFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecl(AFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        inAFuncDecl(node);
        if(node.getCompoundStmt() != null)
        {
            node.getCompoundStmt().apply(this);
        }
        if(node.getRightParenthesis() != null)
        {
            node.getRightParenthesis().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getLeftParenthesis() != null)
        {
            node.getLeftParenthesis().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeSpec() != null)
        {
            node.getTypeSpec().apply(this);
        }
        outAFuncDecl(node);
    }

    public void inALocalDecl(ALocalDecl node)
    {
        defaultIn(node);
    }

    public void outALocalDecl(ALocalDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalDecl(ALocalDecl node)
    {
        inALocalDecl(node);
        if(node.getVarDecl() != null)
        {
            node.getVarDecl().apply(this);
        }
        if(node.getLocalDecl() != null)
        {
            node.getLocalDecl().apply(this);
        }
        outALocalDecl(node);
    }

    public void inAEmptyLocalDecl(AEmptyLocalDecl node)
    {
        defaultIn(node);
    }

    public void outAEmptyLocalDecl(AEmptyLocalDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyLocalDecl(AEmptyLocalDecl node)
    {
        inAEmptyLocalDecl(node);
        outAEmptyLocalDecl(node);
    }

    public void inAIntTypeSpec(AIntTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAIntTypeSpec(AIntTypeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTypeSpec(AIntTypeSpec node)
    {
        inAIntTypeSpec(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntTypeSpec(node);
    }

    public void inAVoidTypeSpec(AVoidTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAVoidTypeSpec(AVoidTypeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidTypeSpec(AVoidTypeSpec node)
    {
        inAVoidTypeSpec(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidTypeSpec(node);
    }

    public void inAStringTypeSpec(AStringTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAStringTypeSpec(AStringTypeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTypeSpec(AStringTypeSpec node)
    {
        inAStringTypeSpec(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringTypeSpec(node);
    }

    public void inAParamParams(AParamParams node)
    {
        defaultIn(node);
    }

    public void outAParamParams(AParamParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamParams(AParamParams node)
    {
        inAParamParams(node);
        {
            List<PParamList> copy = new ArrayList<PParamList>(node.getParamList());
            Collections.reverse(copy);
            for(PParamList e : copy)
            {
                e.apply(this);
            }
        }
        outAParamParams(node);
    }

    public void inANoneParams(ANoneParams node)
    {
        defaultIn(node);
    }

    public void outANoneParams(ANoneParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoneParams(ANoneParams node)
    {
        inANoneParams(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outANoneParams(node);
    }

    public void inASequenceParamList(ASequenceParamList node)
    {
        defaultIn(node);
    }

    public void outASequenceParamList(ASequenceParamList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceParamList(ASequenceParamList node)
    {
        inASequenceParamList(node);
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParamList() != null)
        {
            node.getParamList().apply(this);
        }
        outASequenceParamList(node);
    }

    public void inASingleParamList(ASingleParamList node)
    {
        defaultIn(node);
    }

    public void outASingleParamList(ASingleParamList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleParamList(ASingleParamList node)
    {
        inASingleParamList(node);
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outASingleParamList(node);
    }

    public void inASimpleParam(ASimpleParam node)
    {
        defaultIn(node);
    }

    public void outASimpleParam(ASimpleParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleParam(ASimpleParam node)
    {
        inASimpleParam(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeSpec() != null)
        {
            node.getTypeSpec().apply(this);
        }
        outASimpleParam(node);
    }

    public void inAArrayParam(AArrayParam node)
    {
        defaultIn(node);
    }

    public void outAArrayParam(AArrayParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayParam(AArrayParam node)
    {
        inAArrayParam(node);
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTypeSpec() != null)
        {
            node.getTypeSpec().apply(this);
        }
        outAArrayParam(node);
    }

    public void inACompoundStmt(ACompoundStmt node)
    {
        defaultIn(node);
    }

    public void outACompoundStmt(ACompoundStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundStmt(ACompoundStmt node)
    {
        inACompoundStmt(node);
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        if(node.getStmtList() != null)
        {
            node.getStmtList().apply(this);
        }
        if(node.getLocalDecl() != null)
        {
            node.getLocalDecl().apply(this);
        }
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        outACompoundStmt(node);
    }

    public void inAStmtList(AStmtList node)
    {
        defaultIn(node);
    }

    public void outAStmtList(AStmtList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtList(AStmtList node)
    {
        inAStmtList(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmtList() != null)
        {
            node.getStmtList().apply(this);
        }
        outAStmtList(node);
    }

    public void inAEmptyStmtList(AEmptyStmtList node)
    {
        defaultIn(node);
    }

    public void outAEmptyStmtList(AEmptyStmtList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStmtList(AEmptyStmtList node)
    {
        inAEmptyStmtList(node);
        outAEmptyStmtList(node);
    }

    public void inAMatchedStmtStmt(AMatchedStmtStmt node)
    {
        defaultIn(node);
    }

    public void outAMatchedStmtStmt(AMatchedStmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatchedStmtStmt(AMatchedStmtStmt node)
    {
        inAMatchedStmtStmt(node);
        if(node.getMatchedStmt() != null)
        {
            node.getMatchedStmt().apply(this);
        }
        outAMatchedStmtStmt(node);
    }

    public void inAUnmatchedStmtStmt(AUnmatchedStmtStmt node)
    {
        defaultIn(node);
    }

    public void outAUnmatchedStmtStmt(AUnmatchedStmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnmatchedStmtStmt(AUnmatchedStmtStmt node)
    {
        inAUnmatchedStmtStmt(node);
        if(node.getUnmatchedStmt() != null)
        {
            node.getUnmatchedStmt().apply(this);
        }
        outAUnmatchedStmtStmt(node);
    }

    public void inAMatchedIfMatchedStmt(AMatchedIfMatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAMatchedIfMatchedStmt(AMatchedIfMatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatchedIfMatchedStmt(AMatchedIfMatchedStmt node)
    {
        inAMatchedIfMatchedStmt(node);
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getIfStmt() != null)
        {
            node.getIfStmt().apply(this);
        }
        if(node.getRightParenthesis() != null)
        {
            node.getRightParenthesis().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLeftParenthesis() != null)
        {
            node.getLeftParenthesis().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAMatchedIfMatchedStmt(node);
    }

    public void inAOtherStmtMatchedStmt(AOtherStmtMatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAOtherStmtMatchedStmt(AOtherStmtMatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherStmtMatchedStmt(AOtherStmtMatchedStmt node)
    {
        inAOtherStmtMatchedStmt(node);
        if(node.getOtherStmt() != null)
        {
            node.getOtherStmt().apply(this);
        }
        outAOtherStmtMatchedStmt(node);
    }

    public void inAUnmatchedIfUnmatchedStmt(AUnmatchedIfUnmatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAUnmatchedIfUnmatchedStmt(AUnmatchedIfUnmatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnmatchedIfUnmatchedStmt(AUnmatchedIfUnmatchedStmt node)
    {
        inAUnmatchedIfUnmatchedStmt(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getRightParenthesis() != null)
        {
            node.getRightParenthesis().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLeftParenthesis() != null)
        {
            node.getLeftParenthesis().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAUnmatchedIfUnmatchedStmt(node);
    }

    public void inAUnmatchedIfElseUnmatchedStmt(AUnmatchedIfElseUnmatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAUnmatchedIfElseUnmatchedStmt(AUnmatchedIfElseUnmatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnmatchedIfElseUnmatchedStmt(AUnmatchedIfElseUnmatchedStmt node)
    {
        inAUnmatchedIfElseUnmatchedStmt(node);
        if(node.getUnmatchedStmt() != null)
        {
            node.getUnmatchedStmt().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getMatchedStmt() != null)
        {
            node.getMatchedStmt().apply(this);
        }
        if(node.getRightParenthesis() != null)
        {
            node.getRightParenthesis().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLeftParenthesis() != null)
        {
            node.getLeftParenthesis().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAUnmatchedIfElseUnmatchedStmt(node);
    }

    public void inAExpressionStmtOtherStmt(AExpressionStmtOtherStmt node)
    {
        defaultIn(node);
    }

    public void outAExpressionStmtOtherStmt(AExpressionStmtOtherStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStmtOtherStmt(AExpressionStmtOtherStmt node)
    {
        inAExpressionStmtOtherStmt(node);
        if(node.getExpressionStmt() != null)
        {
            node.getExpressionStmt().apply(this);
        }
        outAExpressionStmtOtherStmt(node);
    }

    public void inACompoundStmtOtherStmt(ACompoundStmtOtherStmt node)
    {
        defaultIn(node);
    }

    public void outACompoundStmtOtherStmt(ACompoundStmtOtherStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundStmtOtherStmt(ACompoundStmtOtherStmt node)
    {
        inACompoundStmtOtherStmt(node);
        if(node.getCompoundStmt() != null)
        {
            node.getCompoundStmt().apply(this);
        }
        outACompoundStmtOtherStmt(node);
    }

    public void inAIterationStmtOtherStmt(AIterationStmtOtherStmt node)
    {
        defaultIn(node);
    }

    public void outAIterationStmtOtherStmt(AIterationStmtOtherStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterationStmtOtherStmt(AIterationStmtOtherStmt node)
    {
        inAIterationStmtOtherStmt(node);
        if(node.getIterationStmt() != null)
        {
            node.getIterationStmt().apply(this);
        }
        outAIterationStmtOtherStmt(node);
    }

    public void inAReturnStmtOtherStmt(AReturnStmtOtherStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnStmtOtherStmt(AReturnStmtOtherStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStmtOtherStmt(AReturnStmtOtherStmt node)
    {
        inAReturnStmtOtherStmt(node);
        if(node.getReturnStmt() != null)
        {
            node.getReturnStmt().apply(this);
        }
        outAReturnStmtOtherStmt(node);
    }

    public void inAExpressionStmt(AExpressionStmt node)
    {
        defaultIn(node);
    }

    public void outAExpressionStmt(AExpressionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStmt(AExpressionStmt node)
    {
        inAExpressionStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionStmt(node);
    }

    public void inAEmptyExpressionStmt(AEmptyExpressionStmt node)
    {
        defaultIn(node);
    }

    public void outAEmptyExpressionStmt(AEmptyExpressionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyExpressionStmt(AEmptyExpressionStmt node)
    {
        inAEmptyExpressionStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAEmptyExpressionStmt(node);
    }

    public void inAIterationStmt(AIterationStmt node)
    {
        defaultIn(node);
    }

    public void outAIterationStmt(AIterationStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIterationStmt(AIterationStmt node)
    {
        inAIterationStmt(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getRightParenthesis() != null)
        {
            node.getRightParenthesis().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLeftParenthesis() != null)
        {
            node.getLeftParenthesis().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAIterationStmt(node);
    }

    public void inAVoidReturnStmt(AVoidReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAVoidReturnStmt(AVoidReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidReturnStmt(AVoidReturnStmt node)
    {
        inAVoidReturnStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAVoidReturnStmt(node);
    }

    public void inAExpressionReturnStmt(AExpressionReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAExpressionReturnStmt(AExpressionReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionReturnStmt(AExpressionReturnStmt node)
    {
        inAExpressionReturnStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAExpressionReturnStmt(node);
    }

    public void inASimpleVar(ASimpleVar node)
    {
        defaultIn(node);
    }

    public void outASimpleVar(ASimpleVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleVar(ASimpleVar node)
    {
        inASimpleVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outASimpleVar(node);
    }

    public void inAArrayVar(AArrayVar node)
    {
        defaultIn(node);
    }

    public void outAArrayVar(AArrayVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayVar(AArrayVar node)
    {
        inAArrayVar(node);
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArrayVar(node);
    }

    public void inAAssignExpressionExpression(AAssignExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outAAssignExpressionExpression(AAssignExpressionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignExpressionExpression(AAssignExpressionExpression node)
    {
        inAAssignExpressionExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAssignExpressionExpression(node);
    }

    public void inASimpleExpressionExpression(ASimpleExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outASimpleExpressionExpression(ASimpleExpressionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExpressionExpression(ASimpleExpressionExpression node)
    {
        inASimpleExpressionExpression(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outASimpleExpressionExpression(node);
    }

    public void inARelopExpressionSimpleExpression(ARelopExpressionSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outARelopExpressionSimpleExpression(ARelopExpressionSimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelopExpressionSimpleExpression(ARelopExpressionSimpleExpression node)
    {
        inARelopExpressionSimpleExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getRelop() != null)
        {
            node.getRelop().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outARelopExpressionSimpleExpression(node);
    }

    public void inAAdditiveExpressionSimpleExpression(AAdditiveExpressionSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditiveExpressionSimpleExpression(AAdditiveExpressionSimpleExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditiveExpressionSimpleExpression(AAdditiveExpressionSimpleExpression node)
    {
        inAAdditiveExpressionSimpleExpression(node);
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outAAdditiveExpressionSimpleExpression(node);
    }

    public void inALessThanOrEqRelop(ALessThanOrEqRelop node)
    {
        defaultIn(node);
    }

    public void outALessThanOrEqRelop(ALessThanOrEqRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanOrEqRelop(ALessThanOrEqRelop node)
    {
        inALessThanOrEqRelop(node);
        if(node.getLessThanOrEq() != null)
        {
            node.getLessThanOrEq().apply(this);
        }
        outALessThanOrEqRelop(node);
    }

    public void inALessThanRelop(ALessThanRelop node)
    {
        defaultIn(node);
    }

    public void outALessThanRelop(ALessThanRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanRelop(ALessThanRelop node)
    {
        inALessThanRelop(node);
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        outALessThanRelop(node);
    }

    public void inAGreaterThanRelop(AGreaterThanRelop node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanRelop(AGreaterThanRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanRelop(AGreaterThanRelop node)
    {
        inAGreaterThanRelop(node);
        if(node.getGreaterThan() != null)
        {
            node.getGreaterThan().apply(this);
        }
        outAGreaterThanRelop(node);
    }

    public void inAGreaterThanOrEqRelop(AGreaterThanOrEqRelop node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanOrEqRelop(AGreaterThanOrEqRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanOrEqRelop(AGreaterThanOrEqRelop node)
    {
        inAGreaterThanOrEqRelop(node);
        if(node.getGreaterThanOrEq() != null)
        {
            node.getGreaterThanOrEq().apply(this);
        }
        outAGreaterThanOrEqRelop(node);
    }

    public void inAEqualsRelop(AEqualsRelop node)
    {
        defaultIn(node);
    }

    public void outAEqualsRelop(AEqualsRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsRelop(AEqualsRelop node)
    {
        inAEqualsRelop(node);
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        outAEqualsRelop(node);
    }

    public void inANotEqualsRelop(ANotEqualsRelop node)
    {
        defaultIn(node);
    }

    public void outANotEqualsRelop(ANotEqualsRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualsRelop(ANotEqualsRelop node)
    {
        inANotEqualsRelop(node);
        if(node.getNotEquals() != null)
        {
            node.getNotEquals().apply(this);
        }
        outANotEqualsRelop(node);
    }

    public void inAAdditiveExpressionAdditiveExpression(AAdditiveExpressionAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditiveExpressionAdditiveExpression(AAdditiveExpressionAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditiveExpressionAdditiveExpression(AAdditiveExpressionAdditiveExpression node)
    {
        inAAdditiveExpressionAdditiveExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getAddop() != null)
        {
            node.getAddop().apply(this);
        }
        if(node.getAdditiveExpression() != null)
        {
            node.getAdditiveExpression().apply(this);
        }
        outAAdditiveExpressionAdditiveExpression(node);
    }

    public void inATermAdditiveExpression(ATermAdditiveExpression node)
    {
        defaultIn(node);
    }

    public void outATermAdditiveExpression(ATermAdditiveExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermAdditiveExpression(ATermAdditiveExpression node)
    {
        inATermAdditiveExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermAdditiveExpression(node);
    }

    public void inAPlusAddop(APlusAddop node)
    {
        defaultIn(node);
    }

    public void outAPlusAddop(APlusAddop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAddop(APlusAddop node)
    {
        inAPlusAddop(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusAddop(node);
    }

    public void inAMinusAddop(AMinusAddop node)
    {
        defaultIn(node);
    }

    public void outAMinusAddop(AMinusAddop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAddop(AMinusAddop node)
    {
        inAMinusAddop(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusAddop(node);
    }

    public void inATermTerm(ATermTerm node)
    {
        defaultIn(node);
    }

    public void outATermTerm(ATermTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermTerm(ATermTerm node)
    {
        inATermTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMulop() != null)
        {
            node.getMulop().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermTerm(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inAMultiplicationMulop(AMultiplicationMulop node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationMulop(AMultiplicationMulop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicationMulop(AMultiplicationMulop node)
    {
        inAMultiplicationMulop(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAMultiplicationMulop(node);
    }

    public void inADivisionMulop(ADivisionMulop node)
    {
        defaultIn(node);
    }

    public void outADivisionMulop(ADivisionMulop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisionMulop(ADivisionMulop node)
    {
        inADivisionMulop(node);
        if(node.getDivision() != null)
        {
            node.getDivision().apply(this);
        }
        outADivisionMulop(node);
    }

    public void inAFactorFactor(AFactorFactor node)
    {
        defaultIn(node);
    }

    public void outAFactorFactor(AFactorFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorFactor(AFactorFactor node)
    {
        inAFactorFactor(node);
        if(node.getRightParenthesis() != null)
        {
            node.getRightParenthesis().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLeftParenthesis() != null)
        {
            node.getLeftParenthesis().apply(this);
        }
        outAFactorFactor(node);
    }

    public void inAVarFactor(AVarFactor node)
    {
        defaultIn(node);
    }

    public void outAVarFactor(AVarFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarFactor(AVarFactor node)
    {
        inAVarFactor(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarFactor(node);
    }

    public void inANumFactor(ANumFactor node)
    {
        defaultIn(node);
    }

    public void outANumFactor(ANumFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumFactor(ANumFactor node)
    {
        inANumFactor(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumFactor(node);
    }

    public void inAStringFactor(AStringFactor node)
    {
        defaultIn(node);
    }

    public void outAStringFactor(AStringFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringFactor(AStringFactor node)
    {
        inAStringFactor(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringFactor(node);
    }

    public void inACallFactor(ACallFactor node)
    {
        defaultIn(node);
    }

    public void outACallFactor(ACallFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallFactor(ACallFactor node)
    {
        inACallFactor(node);
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        outACallFactor(node);
    }

    public void inACall(ACall node)
    {
        defaultIn(node);
    }

    public void outACall(ACall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACall(ACall node)
    {
        inACall(node);
        if(node.getRightParenthesis() != null)
        {
            node.getRightParenthesis().apply(this);
        }
        if(node.getArgList() != null)
        {
            node.getArgList().apply(this);
        }
        if(node.getLeftParenthesis() != null)
        {
            node.getLeftParenthesis().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outACall(node);
    }

    public void inASequenceArgList(ASequenceArgList node)
    {
        defaultIn(node);
    }

    public void outASequenceArgList(ASequenceArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceArgList(ASequenceArgList node)
    {
        inASequenceArgList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArgList() != null)
        {
            node.getArgList().apply(this);
        }
        outASequenceArgList(node);
    }

    public void inASingleArgList(ASingleArgList node)
    {
        defaultIn(node);
    }

    public void outASingleArgList(ASingleArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleArgList(ASingleArgList node)
    {
        inASingleArgList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASingleArgList(node);
    }

    public void inAEmptyArgList(AEmptyArgList node)
    {
        defaultIn(node);
    }

    public void outAEmptyArgList(AEmptyArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyArgList(AEmptyArgList node)
    {
        inAEmptyArgList(node);
        outAEmptyArgList(node);
    }
}
