/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.gcompiler.analysis;

import br.com.ufs.gcompiler.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseADeclList(ADeclList node);
    void caseAVarDeclDecl(AVarDeclDecl node);
    void caseAFuncDeclDecl(AFuncDeclDecl node);
    void caseASimpleVarDecl(ASimpleVarDecl node);
    void caseAArrayVarDecl(AArrayVarDecl node);
    void caseAFuncDecl(AFuncDecl node);
    void caseALocalDecl(ALocalDecl node);
    void caseAEmptyLocalDecl(AEmptyLocalDecl node);
    void caseAIntTypeSpec(AIntTypeSpec node);
    void caseAStringTypeSpec(AStringTypeSpec node);
    void caseAFuncReturnTypeSpec(AFuncReturnTypeSpec node);
    void caseAVoidFuncReturnTypeSpec(AVoidFuncReturnTypeSpec node);
    void caseAParamParams(AParamParams node);
    void caseANoneParams(ANoneParams node);
    void caseASequenceParamList(ASequenceParamList node);
    void caseASingleParamList(ASingleParamList node);
    void caseASimpleParam(ASimpleParam node);
    void caseAArrayParam(AArrayParam node);
    void caseACompoundStmt(ACompoundStmt node);
    void caseAStmtList(AStmtList node);
    void caseAEmptyStmtList(AEmptyStmtList node);
    void caseAMatchedStmtStmt(AMatchedStmtStmt node);
    void caseAUnmatchedStmtStmt(AUnmatchedStmtStmt node);
    void caseAMatchedIfMatchedStmt(AMatchedIfMatchedStmt node);
    void caseAOtherStmtMatchedStmt(AOtherStmtMatchedStmt node);
    void caseAUnmatchedIfUnmatchedStmt(AUnmatchedIfUnmatchedStmt node);
    void caseAUnmatchedIfElseUnmatchedStmt(AUnmatchedIfElseUnmatchedStmt node);
    void caseAExpressionStmtOtherStmt(AExpressionStmtOtherStmt node);
    void caseACompoundStmtOtherStmt(ACompoundStmtOtherStmt node);
    void caseAIterationStmtOtherStmt(AIterationStmtOtherStmt node);
    void caseAReturnStmtOtherStmt(AReturnStmtOtherStmt node);
    void caseAExpressionStmt(AExpressionStmt node);
    void caseAEmptyExpressionStmt(AEmptyExpressionStmt node);
    void caseAIterationStmt(AIterationStmt node);
    void caseAVoidReturnStmt(AVoidReturnStmt node);
    void caseAExpressionReturnStmt(AExpressionReturnStmt node);
    void caseASimpleVar(ASimpleVar node);
    void caseAArrayVar(AArrayVar node);
    void caseAAssignExpressionExpression(AAssignExpressionExpression node);
    void caseASimpleExpressionExpression(ASimpleExpressionExpression node);
    void caseARelopExpressionSimpleExpression(ARelopExpressionSimpleExpression node);
    void caseAAdditiveExpressionSimpleExpression(AAdditiveExpressionSimpleExpression node);
    void caseALessThanOrEqRelop(ALessThanOrEqRelop node);
    void caseALessThanRelop(ALessThanRelop node);
    void caseAGreaterThanRelop(AGreaterThanRelop node);
    void caseAGreaterThanOrEqRelop(AGreaterThanOrEqRelop node);
    void caseAEqualsRelop(AEqualsRelop node);
    void caseANotEqualsRelop(ANotEqualsRelop node);
    void caseAAdditiveExpressionAdditiveExpression(AAdditiveExpressionAdditiveExpression node);
    void caseATermAdditiveExpression(ATermAdditiveExpression node);
    void caseAPlusAddop(APlusAddop node);
    void caseAMinusAddop(AMinusAddop node);
    void caseATermTerm(ATermTerm node);
    void caseAFactorTerm(AFactorTerm node);
    void caseAMultiplicationMulop(AMultiplicationMulop node);
    void caseADivisionMulop(ADivisionMulop node);
    void caseAFactorFactor(AFactorFactor node);
    void caseAVarFactor(AVarFactor node);
    void caseANumFactor(ANumFactor node);
    void caseAStringFactor(AStringFactor node);
    void caseACallFactor(ACallFactor node);
    void caseACall(ACall node);
    void caseASequenceArgList(ASequenceArgList node);
    void caseASingleArgList(ASingleArgList node);
    void caseAEmptyArgList(AEmptyArgList node);

    void caseTInt(TInt node);
    void caseTString(TString node);
    void caseTVoid(TVoid node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTReturn(TReturn node);
    void caseTWhile(TWhile node);
    void caseTNum(TNum node);
    void caseTId(TId node);
    void caseTBlank(TBlank node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTDivision(TDivision node);
    void caseTMultiplication(TMultiplication node);
    void caseTLessThan(TLessThan node);
    void caseTLessThanOrEq(TLessThanOrEq node);
    void caseTGreaterThan(TGreaterThan node);
    void caseTGreaterThanOrEq(TGreaterThanOrEq node);
    void caseTEquals(TEquals node);
    void caseTNotEquals(TNotEquals node);
    void caseTAssign(TAssign node);
    void caseTSemi(TSemi node);
    void caseTComma(TComma node);
    void caseTLeftParenthesis(TLeftParenthesis node);
    void caseTRightParenthesis(TRightParenthesis node);
    void caseTLeftBracket(TLeftBracket node);
    void caseTRightBracket(TRightBracket node);
    void caseTLeftBrace(TLeftBrace node);
    void caseTRightBrace(TRightBrace node);
    void caseTLineComment(TLineComment node);
    void caseTBlkComment(TBlkComment node);
    void caseTBlkCommentEnd(TBlkCommentEnd node);
    void caseTBlkCommentBody(TBlkCommentBody node);
    void caseTStar(TStar node);
    void caseTSlash(TSlash node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
