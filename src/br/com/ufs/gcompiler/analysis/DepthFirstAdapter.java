/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.gcompiler.analysis;

import java.util.*;
import br.com.ufs.gcompiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getDeclList() != null)
        {
            node.getDeclList().apply(this);
        }
        outAProgram(node);
    }

    public void inASequenceDeclList(ASequenceDeclList node)
    {
        defaultIn(node);
    }

    public void outASequenceDeclList(ASequenceDeclList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceDeclList(ASequenceDeclList node)
    {
        inASequenceDeclList(node);
        if(node.getDeclList() != null)
        {
            node.getDeclList().apply(this);
        }
        if(node.getDecl() != null)
        {
            node.getDecl().apply(this);
        }
        outASequenceDeclList(node);
    }

    public void inASingleDeclList(ASingleDeclList node)
    {
        defaultIn(node);
    }

    public void outASingleDeclList(ASingleDeclList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleDeclList(ASingleDeclList node)
    {
        inASingleDeclList(node);
        if(node.getDecl() != null)
        {
            node.getDecl().apply(this);
        }
        outASingleDeclList(node);
    }

    public void inAVarDecl(AVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDecl(AVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        inAVarDecl(node);
        if(node.getTypeSpec() != null)
        {
            node.getTypeSpec().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAVarDecl(node);
    }

    public void inAFuncDecl(AFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecl(AFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        inAFuncDecl(node);
        if(node.getTypeSpec() != null)
        {
            node.getTypeSpec().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLeftParenthesis() != null)
        {
            node.getLeftParenthesis().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getRightParenthesis() != null)
        {
            node.getRightParenthesis().apply(this);
        }
        if(node.getCompoundStmt() != null)
        {
            node.getCompoundStmt().apply(this);
        }
        outAFuncDecl(node);
    }

    public void inAIntTypeSpec(AIntTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAIntTypeSpec(AIntTypeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTypeSpec(AIntTypeSpec node)
    {
        inAIntTypeSpec(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntTypeSpec(node);
    }

    public void inAVoidTypeSpec(AVoidTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAVoidTypeSpec(AVoidTypeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidTypeSpec(AVoidTypeSpec node)
    {
        inAVoidTypeSpec(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidTypeSpec(node);
    }

    public void inAStringTypeSpec(AStringTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAStringTypeSpec(AStringTypeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTypeSpec(AStringTypeSpec node)
    {
        inAStringTypeSpec(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringTypeSpec(node);
    }

    public void inASequenceParams(ASequenceParams node)
    {
        defaultIn(node);
    }

    public void outASequenceParams(ASequenceParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceParams(ASequenceParams node)
    {
        inASequenceParams(node);
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outASequenceParams(node);
    }

    public void inASingleParams(ASingleParams node)
    {
        defaultIn(node);
    }

    public void outASingleParams(ASingleParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleParams(ASingleParams node)
    {
        inASingleParams(node);
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outASingleParams(node);
    }

    public void inAParam(AParam node)
    {
        defaultIn(node);
    }

    public void outAParam(AParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParam(AParam node)
    {
        inAParam(node);
        if(node.getTypeSpec() != null)
        {
            node.getTypeSpec().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParam(node);
    }

    public void inACompoundStmt(ACompoundStmt node)
    {
        defaultIn(node);
    }

    public void outACompoundStmt(ACompoundStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompoundStmt(ACompoundStmt node)
    {
        inACompoundStmt(node);
        if(node.getLeftBrace() != null)
        {
            node.getLeftBrace().apply(this);
        }
        if(node.getRightBrace() != null)
        {
            node.getRightBrace().apply(this);
        }
        outACompoundStmt(node);
    }
}
