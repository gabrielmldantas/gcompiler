/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.gcompiler.parser;

import br.com.ufs.gcompiler.lexer.*;
import br.com.ufs.gcompiler.node.*;
import br.com.ufs.gcompiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ASequenceDeclList */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce ASingleDeclList */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AVarDecl */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AFuncDecl */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AIntTypeSpec */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AVoidTypeSpec */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AStringTypeSpec */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce ASequenceParams */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce ASingleParams */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce AParam */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce ACompoundStmt */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PDeclList pdecllistNode2;
        pdecllistNode2 = (PDeclList)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pdecllistNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ASequenceDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclList pdecllistNode1;
        {
            // Block
        PDeclList pdecllistNode2;
        PDecl pdeclNode3;
        pdecllistNode2 = (PDeclList)nodeArrayList1.get(0);
        pdeclNode3 = (PDecl)nodeArrayList2.get(0);

        pdecllistNode1 = new ASequenceDeclList(pdecllistNode2, pdeclNode3);
        }
	nodeList.add(pdecllistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ASingleDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclList pdecllistNode1;
        {
            // Block
        PDecl pdeclNode2;
        pdeclNode2 = (PDecl)nodeArrayList1.get(0);

        pdecllistNode1 = new ASingleDeclList(pdeclNode2);
        }
	nodeList.add(pdecllistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PTypeSpec ptypespecNode2;
        TId tidNode3;
        TSemi tsemiNode4;
        ptypespecNode2 = (PTypeSpec)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pdeclNode1 = new AVarDecl(ptypespecNode2, tidNode3, tsemiNode4);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PTypeSpec ptypespecNode2;
        TId tidNode3;
        TLeftParenthesis tleftparenthesisNode4;
        PParams pparamsNode5;
        TRightParenthesis trightparenthesisNode6;
        PCompoundStmt pcompoundstmtNode7;
        ptypespecNode2 = (PTypeSpec)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tleftparenthesisNode4 = (TLeftParenthesis)nodeArrayList3.get(0);
        pparamsNode5 = (PParams)nodeArrayList4.get(0);
        trightparenthesisNode6 = (TRightParenthesis)nodeArrayList5.get(0);
        pcompoundstmtNode7 = (PCompoundStmt)nodeArrayList6.get(0);

        pdeclNode1 = new AFuncDecl(ptypespecNode2, tidNode3, tleftparenthesisNode4, pparamsNode5, trightparenthesisNode6, pcompoundstmtNode7);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AIntTypeSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeSpec ptypespecNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypespecNode1 = new AIntTypeSpec(tintNode2);
        }
	nodeList.add(ptypespecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AVoidTypeSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeSpec ptypespecNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        ptypespecNode1 = new AVoidTypeSpec(tvoidNode2);
        }
	nodeList.add(ptypespecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AStringTypeSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypeSpec ptypespecNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypespecNode1 = new AStringTypeSpec(tstringNode2);
        }
	nodeList.add(ptypespecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ASequenceParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        PParams pparamsNode2;
        TComma tcommaNode3;
        PParam pparamNode4;
        pparamsNode2 = (PParams)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pparamNode4 = (PParam)nodeArrayList3.get(0);

        pparamsNode1 = new ASequenceParams(pparamsNode2, tcommaNode3, pparamNode4);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ASingleParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        PParam pparamNode2;
        pparamNode2 = (PParam)nodeArrayList1.get(0);

        pparamsNode1 = new ASingleParams(pparamNode2);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        PTypeSpec ptypespecNode2;
        TId tidNode3;
        ptypespecNode2 = (PTypeSpec)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparamNode1 = new AParam(ptypespecNode2, tidNode3);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ACompoundStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompoundStmt pcompoundstmtNode1;
        {
            // Block
        TLeftBrace tleftbraceNode2;
        TRightBrace trightbraceNode3;
        tleftbraceNode2 = (TLeftBrace)nodeArrayList1.get(0);
        trightbraceNode3 = (TRightBrace)nodeArrayList2.get(0);

        pcompoundstmtNode1 = new ACompoundStmt(tleftbraceNode2, trightbraceNode3);
        }
	nodeList.add(pcompoundstmtNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 4}, {34, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 7}, {8, SHIFT, 9}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 9}, {21, SHIFT, 10}, {23, SHIFT, 11}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 11}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, },
			{{-1, ERROR, 12}, {8, SHIFT, 15}, },
			{{-1, ERROR, 13}, {22, SHIFT, 16}, {24, SHIFT, 17}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 16}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, },
			{{-1, ERROR, 17}, {27, SHIFT, 19}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 19}, {28, SHIFT, 21}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 11}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, },
			{{-1, 6}, {5, 8}, },
			{{-1, 7}, {11, 12}, {16, 12}, },
			{{-1, 13}, },
			{{-1, 14}, {16, 18}, },
			{{-1, 20}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: int, string, void",
			"expecting: id",
			"expecting: EOF",
			"expecting: int, string, void, EOF",
			"expecting: semi, '('",
			"expecting: ',', ')'",
			"expecting: '{'",
			"expecting: '}'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 2, 3, 3, 1, 3, 4, 3, 0, 1, 5, 5, 5, 0, 6, 5, 7, 3, 3, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
