/* This file was generated by SableCC (http://www.sablecc.org/). */

package br.com.ufs.gcompiler.node;

import br.com.ufs.gcompiler.analysis.*;

@SuppressWarnings("nls")
public final class AFuncDecl extends PDecl
{
    private PTypeSpec _typeSpec_;
    private TId _id_;
    private TLeftParenthesis _leftParenthesis_;
    private PParams _params_;
    private TRightParenthesis _rightParenthesis_;
    private PCompoundStmt _compoundStmt_;

    public AFuncDecl()
    {
        // Constructor
    }

    public AFuncDecl(
        @SuppressWarnings("hiding") PTypeSpec _typeSpec_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLeftParenthesis _leftParenthesis_,
        @SuppressWarnings("hiding") PParams _params_,
        @SuppressWarnings("hiding") TRightParenthesis _rightParenthesis_,
        @SuppressWarnings("hiding") PCompoundStmt _compoundStmt_)
    {
        // Constructor
        setTypeSpec(_typeSpec_);

        setId(_id_);

        setLeftParenthesis(_leftParenthesis_);

        setParams(_params_);

        setRightParenthesis(_rightParenthesis_);

        setCompoundStmt(_compoundStmt_);

    }

    @Override
    public Object clone()
    {
        return new AFuncDecl(
            cloneNode(this._typeSpec_),
            cloneNode(this._id_),
            cloneNode(this._leftParenthesis_),
            cloneNode(this._params_),
            cloneNode(this._rightParenthesis_),
            cloneNode(this._compoundStmt_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFuncDecl(this);
    }

    public PTypeSpec getTypeSpec()
    {
        return this._typeSpec_;
    }

    public void setTypeSpec(PTypeSpec node)
    {
        if(this._typeSpec_ != null)
        {
            this._typeSpec_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeSpec_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLeftParenthesis getLeftParenthesis()
    {
        return this._leftParenthesis_;
    }

    public void setLeftParenthesis(TLeftParenthesis node)
    {
        if(this._leftParenthesis_ != null)
        {
            this._leftParenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftParenthesis_ = node;
    }

    public PParams getParams()
    {
        return this._params_;
    }

    public void setParams(PParams node)
    {
        if(this._params_ != null)
        {
            this._params_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._params_ = node;
    }

    public TRightParenthesis getRightParenthesis()
    {
        return this._rightParenthesis_;
    }

    public void setRightParenthesis(TRightParenthesis node)
    {
        if(this._rightParenthesis_ != null)
        {
            this._rightParenthesis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightParenthesis_ = node;
    }

    public PCompoundStmt getCompoundStmt()
    {
        return this._compoundStmt_;
    }

    public void setCompoundStmt(PCompoundStmt node)
    {
        if(this._compoundStmt_ != null)
        {
            this._compoundStmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compoundStmt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._typeSpec_)
            + toString(this._id_)
            + toString(this._leftParenthesis_)
            + toString(this._params_)
            + toString(this._rightParenthesis_)
            + toString(this._compoundStmt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._typeSpec_ == child)
        {
            this._typeSpec_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._leftParenthesis_ == child)
        {
            this._leftParenthesis_ = null;
            return;
        }

        if(this._params_ == child)
        {
            this._params_ = null;
            return;
        }

        if(this._rightParenthesis_ == child)
        {
            this._rightParenthesis_ = null;
            return;
        }

        if(this._compoundStmt_ == child)
        {
            this._compoundStmt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._typeSpec_ == oldChild)
        {
            setTypeSpec((PTypeSpec) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._leftParenthesis_ == oldChild)
        {
            setLeftParenthesis((TLeftParenthesis) newChild);
            return;
        }

        if(this._params_ == oldChild)
        {
            setParams((PParams) newChild);
            return;
        }

        if(this._rightParenthesis_ == oldChild)
        {
            setRightParenthesis((TRightParenthesis) newChild);
            return;
        }

        if(this._compoundStmt_ == oldChild)
        {
            setCompoundStmt((PCompoundStmt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
