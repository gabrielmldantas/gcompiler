Package br.com.ufs.gcompiler; 

Helpers 
    digit = ['0' .. '9'];
    letter = ['a' .. 'z'] | ['A' .. 'Z']; 
    tab = 9;
    cr = 13;
    lf = 10;
    eol = cr lf | cr | lf;
    blank = (' ' | tab | eol)+;
    all = [0 .. 0xFF];
    not_line_break = [all - [cr + lf]];
    not_star = [all - '*'];
    not_star_slash = [not_star - '/'];
    semi = ';';

	int = 'int';
	void = 'void';
	string = 'string';
	while = 'while';
	if = 'if';
	else = 'else';
	return = 'return';
    
    line_comment = '//' not_line_break* eol;
    blk_comment_start = '/*';
  
States
	normal,
	comment;
  
Tokens
{normal}    int = int;
{normal}    string = string;
{normal}    void = void;
{normal}    if = if;
{normal}    else = else;
{normal}    return = return;
{normal}    while = while;
    
{normal}	num = digit+;
{normal}    id = letter+;
{normal}    blank = blank;
{normal}    string_literal = '"' not_line_break* '"';
    
{normal}    plus = '+';
{normal}    minus = '-';
{normal}    division = '/';
{normal}    multiplication = '*';
{normal}    less_than = '<';
{normal}    less_than_or_eq = '<=';
{normal}    greater_than = '>';
{normal}    greater_than_or_eq = '>=';
{normal}    equals = '==';
{normal}    not_equals = '!=';
{normal}    assign = '=';
{normal}    semi = semi+;
{normal}    comma = ',';
{normal}    left_parenthesis = '(';
{normal}    right_parenthesis = ')';
{normal}    left_bracket = '[';
{normal}    right_bracket = ']';
{normal}    left_brace = '{';
{normal}    right_brace = '}';

{normal}	line_comment = line_comment;

{normal->comment, comment}	blk_comment = blk_comment_start;
{comment, normal}	blk_comment_end = '*/';
{comment}	blk_comment_body = not_star_slash*;
{comment}	star = '*';
{comment}	slash = '/';

    
Ignored Tokens
	blank,
	blk_comment,
	line_comment;
    
Productions
	program = decl_list;
	decl_list = decl+;
	decl = {var_decl} var_decl | {func_decl} func_decl;
	var_decl = {simple} type_spec id semi | {array} type_spec id left_bracket num right_bracket semi;
	func_decl = func_return_type_spec id left_parenthesis params right_parenthesis compound_stmt;
	local_decl = local_decl var_decl | {empty};
	type_spec = {int} int | {string} string;
	func_return_type_spec = type_spec | {void} void;
	params = {param} param_list+ | {none} void;
	param_list = {sequence} param_list comma param | {single} param;
	param = {simple} type_spec id | {array} type_spec id left_bracket right_bracket;
	
	compound_stmt = left_brace local_decl stmt_list right_brace;
	stmt_list = stmt_list stmt | {empty};
	stmt = {matched_stmt} matched_stmt | {unmatched_stmt} unmatched_stmt;
    matched_stmt = {matched_if} if left_parenthesis expression right_parenthesis [if_stmt]:matched_stmt else [else_stmt]:matched_stmt | {other_stmt} other_stmt;
	unmatched_stmt = {unmatched_if} if left_parenthesis expression right_parenthesis stmt | {unmatched_if_else} if left_parenthesis expression right_parenthesis matched_stmt else unmatched_stmt;
	other_stmt = {expression_stmt} expression_stmt | {compound_stmt} compound_stmt | {iteration_stmt} iteration_stmt | {return_stmt} return_stmt;
	expression_stmt = expression semi | {empty} semi;
	iteration_stmt = while left_parenthesis expression right_parenthesis other_stmt;
    return_stmt = {void} return semi | {expression} return expression semi;
    
    var = {simple} id | {array} id left_bracket expression right_bracket;
	expression = {assign_expression} var assign expression | {simple_expression} simple_expression;
    simple_expression = {relop_expression} [left]:additive_expression relop [right]:additive_expression | {additive_expression} additive_expression;
    relop = {less_than_or_eq} less_than_or_eq | {less_than} less_than | {greater_than} greater_than | {greater_than_or_eq} greater_than_or_eq | {equals} equals | {not_equals} not_equals;
    additive_expression = {additive_expression} additive_expression addop term | {term} term;
    addop = {plus} plus | {minus} minus;
    term = {term} term mulop factor | {factor} factor;
    mulop = {multiplication} multiplication | {division} division;
    factor = {factor} left_parenthesis expression right_parenthesis | {var} var | {num} num | {string} string_literal | {call} call;
    
    call = id left_parenthesis arg_list right_parenthesis;
    arg_list = {sequence} arg_list comma expression | {single} expression | {empty};
    